#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34209
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace LINQProj
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="libraryForNET14")]
	public partial class LibraryDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertAuthors(Authors instance);
    partial void UpdateAuthors(Authors instance);
    partial void DeleteAuthors(Authors instance);
    partial void InsertThemes(Themes instance);
    partial void UpdateThemes(Themes instance);
    partial void DeleteThemes(Themes instance);
    partial void InsertBooks(Books instance);
    partial void UpdateBooks(Books instance);
    partial void DeleteBooks(Books instance);
    partial void InsertCategories(Categories instance);
    partial void UpdateCategories(Categories instance);
    partial void DeleteCategories(Categories instance);
    partial void InsertDepartments(Departments instance);
    partial void UpdateDepartments(Departments instance);
    partial void DeleteDepartments(Departments instance);
    partial void InsertFaculties(Faculties instance);
    partial void UpdateFaculties(Faculties instance);
    partial void DeleteFaculties(Faculties instance);
    partial void InsertGroups(Groups instance);
    partial void UpdateGroups(Groups instance);
    partial void DeleteGroups(Groups instance);
    partial void InsertLibs(Libs instance);
    partial void UpdateLibs(Libs instance);
    partial void DeleteLibs(Libs instance);
    partial void InsertLogins(Logins instance);
    partial void UpdateLogins(Logins instance);
    partial void DeleteLogins(Logins instance);
    partial void InsertPress(Press instance);
    partial void UpdatePress(Press instance);
    partial void DeletePress(Press instance);
    partial void InsertS_Cards(S_Cards instance);
    partial void UpdateS_Cards(S_Cards instance);
    partial void DeleteS_Cards(S_Cards instance);
    partial void InsertStudents(Students instance);
    partial void UpdateStudents(Students instance);
    partial void DeleteStudents(Students instance);
    partial void InsertT_Cards(T_Cards instance);
    partial void UpdateT_Cards(T_Cards instance);
    partial void DeleteT_Cards(T_Cards instance);
    partial void InsertTeachers(Teachers instance);
    partial void UpdateTeachers(Teachers instance);
    partial void DeleteTeachers(Teachers instance);
    #endregion
		
		public LibraryDataContext() : 
				base(global::LINQProj.Properties.Settings.Default.libraryForNET14ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public LibraryDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Authors> Authors
		{
			get
			{
				return this.GetTable<Authors>();
			}
		}
		
		public System.Data.Linq.Table<Themes> Themes
		{
			get
			{
				return this.GetTable<Themes>();
			}
		}
		
		public System.Data.Linq.Table<Books> Books
		{
			get
			{
				return this.GetTable<Books>();
			}
		}
		
		public System.Data.Linq.Table<Categories> Categories
		{
			get
			{
				return this.GetTable<Categories>();
			}
		}
		
		public System.Data.Linq.Table<Departments> Departments
		{
			get
			{
				return this.GetTable<Departments>();
			}
		}
		
		public System.Data.Linq.Table<Faculties> Faculties
		{
			get
			{
				return this.GetTable<Faculties>();
			}
		}
		
		public System.Data.Linq.Table<Groups> Groups
		{
			get
			{
				return this.GetTable<Groups>();
			}
		}
		
		public System.Data.Linq.Table<Libs> Libs
		{
			get
			{
				return this.GetTable<Libs>();
			}
		}
		
		public System.Data.Linq.Table<Logins> Logins
		{
			get
			{
				return this.GetTable<Logins>();
			}
		}
		
		public System.Data.Linq.Table<Press> Press
		{
			get
			{
				return this.GetTable<Press>();
			}
		}
		
		public System.Data.Linq.Table<S_Cards> S_Cards
		{
			get
			{
				return this.GetTable<S_Cards>();
			}
		}
		
		public System.Data.Linq.Table<Students> Students
		{
			get
			{
				return this.GetTable<Students>();
			}
		}
		
		public System.Data.Linq.Table<T_Cards> T_Cards
		{
			get
			{
				return this.GetTable<T_Cards>();
			}
		}
		
		public System.Data.Linq.Table<Teachers> Teachers
		{
			get
			{
				return this.GetTable<Teachers>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Authors")]
	public partial class Authors : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<Books> _Books;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Authors()
		{
			this._Books = new EntitySet<Books>(new Action<Books>(this.attach_Books), new Action<Books>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authors_Books", Storage="_Books", ThisKey="Id", OtherKey="Id_Author")]
		public EntitySet<Books> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Authors = this;
		}
		
		private void detach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Authors = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Themes")]
	public partial class Themes : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Books> _Books;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Themes()
		{
			this._Books = new EntitySet<Books>(new Action<Books>(this.attach_Books), new Action<Books>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Themes_Books", Storage="_Books", ThisKey="Id", OtherKey="Id_Themes")]
		public EntitySet<Books> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Themes = this;
		}
		
		private void detach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Themes = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Books")]
	public partial class Books : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Pages;
		
		private int _YearPress;
		
		private int _Id_Themes;
		
		private int _Id_Category;
		
		private int _Id_Author;
		
		private int _Id_Press;
		
		private string _Comment;
		
		private int _Quantity;
		
		private EntitySet<S_Cards> _S_Cards;
		
		private EntitySet<T_Cards> _T_Cards;
		
		private EntityRef<Authors> _Authors;
		
		private EntityRef<Themes> _Themes;
		
		private EntityRef<Categories> _Categories;
		
		private EntityRef<Press> _Press;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPagesChanging(int value);
    partial void OnPagesChanged();
    partial void OnYearPressChanging(int value);
    partial void OnYearPressChanged();
    partial void OnId_ThemesChanging(int value);
    partial void OnId_ThemesChanged();
    partial void OnId_CategoryChanging(int value);
    partial void OnId_CategoryChanged();
    partial void OnId_AuthorChanging(int value);
    partial void OnId_AuthorChanged();
    partial void OnId_PressChanging(int value);
    partial void OnId_PressChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnQuantityChanging(int value);
    partial void OnQuantityChanged();
    #endregion
		
		public Books()
		{
			this._S_Cards = new EntitySet<S_Cards>(new Action<S_Cards>(this.attach_S_Cards), new Action<S_Cards>(this.detach_S_Cards));
			this._T_Cards = new EntitySet<T_Cards>(new Action<T_Cards>(this.attach_T_Cards), new Action<T_Cards>(this.detach_T_Cards));
			this._Authors = default(EntityRef<Authors>);
			this._Themes = default(EntityRef<Themes>);
			this._Categories = default(EntityRef<Categories>);
			this._Press = default(EntityRef<Press>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(100) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pages", DbType="Int NOT NULL")]
		public int Pages
		{
			get
			{
				return this._Pages;
			}
			set
			{
				if ((this._Pages != value))
				{
					this.OnPagesChanging(value);
					this.SendPropertyChanging();
					this._Pages = value;
					this.SendPropertyChanged("Pages");
					this.OnPagesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_YearPress", DbType="Int NOT NULL")]
		public int YearPress
		{
			get
			{
				return this._YearPress;
			}
			set
			{
				if ((this._YearPress != value))
				{
					this.OnYearPressChanging(value);
					this.SendPropertyChanging();
					this._YearPress = value;
					this.SendPropertyChanged("YearPress");
					this.OnYearPressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Themes", DbType="Int NOT NULL")]
		public int Id_Themes
		{
			get
			{
				return this._Id_Themes;
			}
			set
			{
				if ((this._Id_Themes != value))
				{
					if (this._Themes.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_ThemesChanging(value);
					this.SendPropertyChanging();
					this._Id_Themes = value;
					this.SendPropertyChanged("Id_Themes");
					this.OnId_ThemesChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Category", DbType="Int NOT NULL")]
		public int Id_Category
		{
			get
			{
				return this._Id_Category;
			}
			set
			{
				if ((this._Id_Category != value))
				{
					if (this._Categories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_CategoryChanging(value);
					this.SendPropertyChanging();
					this._Id_Category = value;
					this.SendPropertyChanged("Id_Category");
					this.OnId_CategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Author", DbType="Int NOT NULL")]
		public int Id_Author
		{
			get
			{
				return this._Id_Author;
			}
			set
			{
				if ((this._Id_Author != value))
				{
					if (this._Authors.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_AuthorChanging(value);
					this.SendPropertyChanging();
					this._Id_Author = value;
					this.SendPropertyChanged("Id_Author");
					this.OnId_AuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Press", DbType="Int NOT NULL")]
		public int Id_Press
		{
			get
			{
				return this._Id_Press;
			}
			set
			{
				if ((this._Id_Press != value))
				{
					if (this._Press.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_PressChanging(value);
					this.SendPropertyChanging();
					this._Id_Press = value;
					this.SendPropertyChanged("Id_Press");
					this.OnId_PressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(50)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantity", DbType="Int NOT NULL")]
		public int Quantity
		{
			get
			{
				return this._Quantity;
			}
			set
			{
				if ((this._Quantity != value))
				{
					this.OnQuantityChanging(value);
					this.SendPropertyChanging();
					this._Quantity = value;
					this.SendPropertyChanged("Quantity");
					this.OnQuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_S_Cards", Storage="_S_Cards", ThisKey="Id", OtherKey="Id_Book")]
		public EntitySet<S_Cards> S_Cards
		{
			get
			{
				return this._S_Cards;
			}
			set
			{
				this._S_Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_T_Cards", Storage="_T_Cards", ThisKey="Id", OtherKey="Id_Book")]
		public EntitySet<T_Cards> T_Cards
		{
			get
			{
				return this._T_Cards;
			}
			set
			{
				this._T_Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Authors_Books", Storage="_Authors", ThisKey="Id_Author", OtherKey="Id", IsForeignKey=true)]
		public Authors Authors
		{
			get
			{
				return this._Authors.Entity;
			}
			set
			{
				Authors previousValue = this._Authors.Entity;
				if (((previousValue != value) 
							|| (this._Authors.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Authors.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Authors.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._Id_Author = value.Id;
					}
					else
					{
						this._Id_Author = default(int);
					}
					this.SendPropertyChanged("Authors");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Themes_Books", Storage="_Themes", ThisKey="Id_Themes", OtherKey="Id", IsForeignKey=true)]
		public Themes Themes
		{
			get
			{
				return this._Themes.Entity;
			}
			set
			{
				Themes previousValue = this._Themes.Entity;
				if (((previousValue != value) 
							|| (this._Themes.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Themes.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Themes.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._Id_Themes = value.Id;
					}
					else
					{
						this._Id_Themes = default(int);
					}
					this.SendPropertyChanged("Themes");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Books", Storage="_Categories", ThisKey="Id_Category", OtherKey="Id", IsForeignKey=true)]
		public Categories Categories
		{
			get
			{
				return this._Categories.Entity;
			}
			set
			{
				Categories previousValue = this._Categories.Entity;
				if (((previousValue != value) 
							|| (this._Categories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Categories.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Categories.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._Id_Category = value.Id;
					}
					else
					{
						this._Id_Category = default(int);
					}
					this.SendPropertyChanged("Categories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Press_Books", Storage="_Press", ThisKey="Id_Press", OtherKey="Id", IsForeignKey=true)]
		public Press Press
		{
			get
			{
				return this._Press.Entity;
			}
			set
			{
				Press previousValue = this._Press.Entity;
				if (((previousValue != value) 
							|| (this._Press.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Press.Entity = null;
						previousValue.Books.Remove(this);
					}
					this._Press.Entity = value;
					if ((value != null))
					{
						value.Books.Add(this);
						this._Id_Press = value.Id;
					}
					else
					{
						this._Id_Press = default(int);
					}
					this.SendPropertyChanged("Press");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_S_Cards(S_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Books = this;
		}
		
		private void detach_S_Cards(S_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Books = null;
		}
		
		private void attach_T_Cards(T_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Books = this;
		}
		
		private void detach_T_Cards(T_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Books = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Categories")]
	public partial class Categories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Books> _Books;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Categories()
		{
			this._Books = new EntitySet<Books>(new Action<Books>(this.attach_Books), new Action<Books>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Categories_Books", Storage="_Books", ThisKey="Id", OtherKey="Id_Category")]
		public EntitySet<Books> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Categories = this;
		}
		
		private void detach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Categories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Departments")]
	public partial class Departments : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Teachers> _Teachers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Departments()
		{
			this._Teachers = new EntitySet<Teachers>(new Action<Teachers>(this.attach_Teachers), new Action<Teachers>(this.detach_Teachers));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departments_Teachers", Storage="_Teachers", ThisKey="Id", OtherKey="Id_Dep")]
		public EntitySet<Teachers> Teachers
		{
			get
			{
				return this._Teachers;
			}
			set
			{
				this._Teachers.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Teachers(Teachers entity)
		{
			this.SendPropertyChanging();
			entity.Departments = this;
		}
		
		private void detach_Teachers(Teachers entity)
		{
			this.SendPropertyChanging();
			entity.Departments = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Faculties")]
	public partial class Faculties : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Groups> _Groups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Faculties()
		{
			this._Groups = new EntitySet<Groups>(new Action<Groups>(this.attach_Groups), new Action<Groups>(this.detach_Groups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculties_Groups", Storage="_Groups", ThisKey="Id", OtherKey="Id_Faculty")]
		public EntitySet<Groups> Groups
		{
			get
			{
				return this._Groups;
			}
			set
			{
				this._Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.Faculties = this;
		}
		
		private void detach_Groups(Groups entity)
		{
			this.SendPropertyChanging();
			entity.Faculties = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Groups")]
	public partial class Groups : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _Id_Faculty;
		
		private EntitySet<Students> _Students;
		
		private EntityRef<Faculties> _Faculties;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnId_FacultyChanging(int value);
    partial void OnId_FacultyChanged();
    #endregion
		
		public Groups()
		{
			this._Students = new EntitySet<Students>(new Action<Students>(this.attach_Students), new Action<Students>(this.detach_Students));
			this._Faculties = default(EntityRef<Faculties>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Faculty", DbType="Int NOT NULL")]
		public int Id_Faculty
		{
			get
			{
				return this._Id_Faculty;
			}
			set
			{
				if ((this._Id_Faculty != value))
				{
					if (this._Faculties.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_FacultyChanging(value);
					this.SendPropertyChanging();
					this._Id_Faculty = value;
					this.SendPropertyChanged("Id_Faculty");
					this.OnId_FacultyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Students", Storage="_Students", ThisKey="Id", OtherKey="Id_Group")]
		public EntitySet<Students> Students
		{
			get
			{
				return this._Students;
			}
			set
			{
				this._Students.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Faculties_Groups", Storage="_Faculties", ThisKey="Id_Faculty", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Faculties Faculties
		{
			get
			{
				return this._Faculties.Entity;
			}
			set
			{
				Faculties previousValue = this._Faculties.Entity;
				if (((previousValue != value) 
							|| (this._Faculties.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Faculties.Entity = null;
						previousValue.Groups.Remove(this);
					}
					this._Faculties.Entity = value;
					if ((value != null))
					{
						value.Groups.Add(this);
						this._Id_Faculty = value.Id;
					}
					else
					{
						this._Id_Faculty = default(int);
					}
					this.SendPropertyChanged("Faculties");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.Groups = this;
		}
		
		private void detach_Students(Students entity)
		{
			this.SendPropertyChanging();
			entity.Groups = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Libs")]
	public partial class Libs : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private EntitySet<S_Cards> _S_Cards;
		
		private EntitySet<T_Cards> _T_Cards;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    #endregion
		
		public Libs()
		{
			this._S_Cards = new EntitySet<S_Cards>(new Action<S_Cards>(this.attach_S_Cards), new Action<S_Cards>(this.detach_S_Cards));
			this._T_Cards = new EntitySet<T_Cards>(new Action<T_Cards>(this.attach_T_Cards), new Action<T_Cards>(this.detach_T_Cards));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Libs_S_Cards", Storage="_S_Cards", ThisKey="Id", OtherKey="Id_Lib")]
		public EntitySet<S_Cards> S_Cards
		{
			get
			{
				return this._S_Cards;
			}
			set
			{
				this._S_Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Libs_T_Cards", Storage="_T_Cards", ThisKey="Id", OtherKey="Id_Lib")]
		public EntitySet<T_Cards> T_Cards
		{
			get
			{
				return this._T_Cards;
			}
			set
			{
				this._T_Cards.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_S_Cards(S_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Libs = this;
		}
		
		private void detach_S_Cards(S_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Libs = null;
		}
		
		private void attach_T_Cards(T_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Libs = this;
		}
		
		private void detach_T_Cards(T_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Libs = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logins")]
	public partial class Logins : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Login;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnLoginChanging(string value);
    partial void OnLoginChanged();
    #endregion
		
		public Logins()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Login", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Login
		{
			get
			{
				return this._Login;
			}
			set
			{
				if ((this._Login != value))
				{
					this.OnLoginChanging(value);
					this.SendPropertyChanging();
					this._Login = value;
					this.SendPropertyChanged("Login");
					this.OnLoginChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Press")]
	public partial class Press : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<Books> _Books;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Press()
		{
			this._Books = new EntitySet<Books>(new Action<Books>(this.attach_Books), new Action<Books>(this.detach_Books));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Press_Books", Storage="_Books", ThisKey="Id", OtherKey="Id_Press")]
		public EntitySet<Books> Books
		{
			get
			{
				return this._Books;
			}
			set
			{
				this._Books.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Press = this;
		}
		
		private void detach_Books(Books entity)
		{
			this.SendPropertyChanging();
			entity.Press = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.S_Cards")]
	public partial class S_Cards : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Id_Student;
		
		private int _Id_Book;
		
		private System.DateTime _DateOut;
		
		private System.Nullable<System.DateTime> _DateIn;
		
		private int _Id_Lib;
		
		private EntityRef<Books> _Books;
		
		private EntityRef<Libs> _Libs;
		
		private EntityRef<Students> _Students;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnId_StudentChanging(int value);
    partial void OnId_StudentChanged();
    partial void OnId_BookChanging(int value);
    partial void OnId_BookChanged();
    partial void OnDateOutChanging(System.DateTime value);
    partial void OnDateOutChanged();
    partial void OnDateInChanging(System.Nullable<System.DateTime> value);
    partial void OnDateInChanged();
    partial void OnId_LibChanging(int value);
    partial void OnId_LibChanged();
    #endregion
		
		public S_Cards()
		{
			this._Books = default(EntityRef<Books>);
			this._Libs = default(EntityRef<Libs>);
			this._Students = default(EntityRef<Students>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Student", DbType="Int NOT NULL")]
		public int Id_Student
		{
			get
			{
				return this._Id_Student;
			}
			set
			{
				if ((this._Id_Student != value))
				{
					if (this._Students.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_StudentChanging(value);
					this.SendPropertyChanging();
					this._Id_Student = value;
					this.SendPropertyChanged("Id_Student");
					this.OnId_StudentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Book", DbType="Int NOT NULL")]
		public int Id_Book
		{
			get
			{
				return this._Id_Book;
			}
			set
			{
				if ((this._Id_Book != value))
				{
					if (this._Books.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_BookChanging(value);
					this.SendPropertyChanging();
					this._Id_Book = value;
					this.SendPropertyChanged("Id_Book");
					this.OnId_BookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOut", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateOut
		{
			get
			{
				return this._DateOut;
			}
			set
			{
				if ((this._DateOut != value))
				{
					this.OnDateOutChanging(value);
					this.SendPropertyChanging();
					this._DateOut = value;
					this.SendPropertyChanged("DateOut");
					this.OnDateOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateIn", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateIn
		{
			get
			{
				return this._DateIn;
			}
			set
			{
				if ((this._DateIn != value))
				{
					this.OnDateInChanging(value);
					this.SendPropertyChanging();
					this._DateIn = value;
					this.SendPropertyChanged("DateIn");
					this.OnDateInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Lib", DbType="Int NOT NULL")]
		public int Id_Lib
		{
			get
			{
				return this._Id_Lib;
			}
			set
			{
				if ((this._Id_Lib != value))
				{
					if (this._Libs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_LibChanging(value);
					this.SendPropertyChanging();
					this._Id_Lib = value;
					this.SendPropertyChanged("Id_Lib");
					this.OnId_LibChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_S_Cards", Storage="_Books", ThisKey="Id_Book", OtherKey="Id", IsForeignKey=true)]
		public Books Books
		{
			get
			{
				return this._Books.Entity;
			}
			set
			{
				Books previousValue = this._Books.Entity;
				if (((previousValue != value) 
							|| (this._Books.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Books.Entity = null;
						previousValue.S_Cards.Remove(this);
					}
					this._Books.Entity = value;
					if ((value != null))
					{
						value.S_Cards.Add(this);
						this._Id_Book = value.Id;
					}
					else
					{
						this._Id_Book = default(int);
					}
					this.SendPropertyChanged("Books");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Libs_S_Cards", Storage="_Libs", ThisKey="Id_Lib", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Libs Libs
		{
			get
			{
				return this._Libs.Entity;
			}
			set
			{
				Libs previousValue = this._Libs.Entity;
				if (((previousValue != value) 
							|| (this._Libs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Libs.Entity = null;
						previousValue.S_Cards.Remove(this);
					}
					this._Libs.Entity = value;
					if ((value != null))
					{
						value.S_Cards.Add(this);
						this._Id_Lib = value.Id;
					}
					else
					{
						this._Id_Lib = default(int);
					}
					this.SendPropertyChanged("Libs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_S_Cards", Storage="_Students", ThisKey="Id_Student", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Students Students
		{
			get
			{
				return this._Students.Entity;
			}
			set
			{
				Students previousValue = this._Students.Entity;
				if (((previousValue != value) 
							|| (this._Students.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Students.Entity = null;
						previousValue.S_Cards.Remove(this);
					}
					this._Students.Entity = value;
					if ((value != null))
					{
						value.S_Cards.Add(this);
						this._Id_Student = value.Id;
					}
					else
					{
						this._Id_Student = default(int);
					}
					this.SendPropertyChanged("Students");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Students")]
	public partial class Students : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _Id_Group;
		
		private int _Term;
		
		private System.Nullable<int> _Id_Login;
		
		private EntitySet<S_Cards> _S_Cards;
		
		private EntityRef<Groups> _Groups;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnId_GroupChanging(int value);
    partial void OnId_GroupChanged();
    partial void OnTermChanging(int value);
    partial void OnTermChanged();
    partial void OnId_LoginChanging(System.Nullable<int> value);
    partial void OnId_LoginChanged();
    #endregion
		
		public Students()
		{
			this._S_Cards = new EntitySet<S_Cards>(new Action<S_Cards>(this.attach_S_Cards), new Action<S_Cards>(this.detach_S_Cards));
			this._Groups = default(EntityRef<Groups>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Group", DbType="Int NOT NULL")]
		public int Id_Group
		{
			get
			{
				return this._Id_Group;
			}
			set
			{
				if ((this._Id_Group != value))
				{
					if (this._Groups.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_GroupChanging(value);
					this.SendPropertyChanging();
					this._Id_Group = value;
					this.SendPropertyChanged("Id_Group");
					this.OnId_GroupChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Term", DbType="Int NOT NULL")]
		public int Term
		{
			get
			{
				return this._Term;
			}
			set
			{
				if ((this._Term != value))
				{
					this.OnTermChanging(value);
					this.SendPropertyChanging();
					this._Term = value;
					this.SendPropertyChanged("Term");
					this.OnTermChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Login", DbType="Int")]
		public System.Nullable<int> Id_Login
		{
			get
			{
				return this._Id_Login;
			}
			set
			{
				if ((this._Id_Login != value))
				{
					this.OnId_LoginChanging(value);
					this.SendPropertyChanging();
					this._Id_Login = value;
					this.SendPropertyChanged("Id_Login");
					this.OnId_LoginChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Students_S_Cards", Storage="_S_Cards", ThisKey="Id", OtherKey="Id_Student")]
		public EntitySet<S_Cards> S_Cards
		{
			get
			{
				return this._S_Cards;
			}
			set
			{
				this._S_Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groups_Students", Storage="_Groups", ThisKey="Id_Group", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Groups Groups
		{
			get
			{
				return this._Groups.Entity;
			}
			set
			{
				Groups previousValue = this._Groups.Entity;
				if (((previousValue != value) 
							|| (this._Groups.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groups.Entity = null;
						previousValue.Students.Remove(this);
					}
					this._Groups.Entity = value;
					if ((value != null))
					{
						value.Students.Add(this);
						this._Id_Group = value.Id;
					}
					else
					{
						this._Id_Group = default(int);
					}
					this.SendPropertyChanged("Groups");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_S_Cards(S_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Students = this;
		}
		
		private void detach_S_Cards(S_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Students = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.T_Cards")]
	public partial class T_Cards : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _Id_Teacher;
		
		private int _Id_Book;
		
		private System.DateTime _DateOut;
		
		private System.Nullable<System.DateTime> _DateIn;
		
		private int _Id_Lib;
		
		private EntityRef<Books> _Books;
		
		private EntityRef<Libs> _Libs;
		
		private EntityRef<Teachers> _Teachers;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnId_TeacherChanging(int value);
    partial void OnId_TeacherChanged();
    partial void OnId_BookChanging(int value);
    partial void OnId_BookChanged();
    partial void OnDateOutChanging(System.DateTime value);
    partial void OnDateOutChanged();
    partial void OnDateInChanging(System.Nullable<System.DateTime> value);
    partial void OnDateInChanged();
    partial void OnId_LibChanging(int value);
    partial void OnId_LibChanged();
    #endregion
		
		public T_Cards()
		{
			this._Books = default(EntityRef<Books>);
			this._Libs = default(EntityRef<Libs>);
			this._Teachers = default(EntityRef<Teachers>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Teacher", DbType="Int NOT NULL")]
		public int Id_Teacher
		{
			get
			{
				return this._Id_Teacher;
			}
			set
			{
				if ((this._Id_Teacher != value))
				{
					if (this._Teachers.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_TeacherChanging(value);
					this.SendPropertyChanging();
					this._Id_Teacher = value;
					this.SendPropertyChanged("Id_Teacher");
					this.OnId_TeacherChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Book", DbType="Int NOT NULL")]
		public int Id_Book
		{
			get
			{
				return this._Id_Book;
			}
			set
			{
				if ((this._Id_Book != value))
				{
					if (this._Books.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_BookChanging(value);
					this.SendPropertyChanging();
					this._Id_Book = value;
					this.SendPropertyChanged("Id_Book");
					this.OnId_BookChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateOut", DbType="SmallDateTime NOT NULL")]
		public System.DateTime DateOut
		{
			get
			{
				return this._DateOut;
			}
			set
			{
				if ((this._DateOut != value))
				{
					this.OnDateOutChanging(value);
					this.SendPropertyChanging();
					this._DateOut = value;
					this.SendPropertyChanged("DateOut");
					this.OnDateOutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateIn", DbType="SmallDateTime")]
		public System.Nullable<System.DateTime> DateIn
		{
			get
			{
				return this._DateIn;
			}
			set
			{
				if ((this._DateIn != value))
				{
					this.OnDateInChanging(value);
					this.SendPropertyChanging();
					this._DateIn = value;
					this.SendPropertyChanged("DateIn");
					this.OnDateInChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Lib", DbType="Int NOT NULL")]
		public int Id_Lib
		{
			get
			{
				return this._Id_Lib;
			}
			set
			{
				if ((this._Id_Lib != value))
				{
					if (this._Libs.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_LibChanging(value);
					this.SendPropertyChanging();
					this._Id_Lib = value;
					this.SendPropertyChanged("Id_Lib");
					this.OnId_LibChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Books_T_Cards", Storage="_Books", ThisKey="Id_Book", OtherKey="Id", IsForeignKey=true)]
		public Books Books
		{
			get
			{
				return this._Books.Entity;
			}
			set
			{
				Books previousValue = this._Books.Entity;
				if (((previousValue != value) 
							|| (this._Books.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Books.Entity = null;
						previousValue.T_Cards.Remove(this);
					}
					this._Books.Entity = value;
					if ((value != null))
					{
						value.T_Cards.Add(this);
						this._Id_Book = value.Id;
					}
					else
					{
						this._Id_Book = default(int);
					}
					this.SendPropertyChanged("Books");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Libs_T_Cards", Storage="_Libs", ThisKey="Id_Lib", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Libs Libs
		{
			get
			{
				return this._Libs.Entity;
			}
			set
			{
				Libs previousValue = this._Libs.Entity;
				if (((previousValue != value) 
							|| (this._Libs.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Libs.Entity = null;
						previousValue.T_Cards.Remove(this);
					}
					this._Libs.Entity = value;
					if ((value != null))
					{
						value.T_Cards.Add(this);
						this._Id_Lib = value.Id;
					}
					else
					{
						this._Id_Lib = default(int);
					}
					this.SendPropertyChanged("Libs");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_T_Cards", Storage="_Teachers", ThisKey="Id_Teacher", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Teachers Teachers
		{
			get
			{
				return this._Teachers.Entity;
			}
			set
			{
				Teachers previousValue = this._Teachers.Entity;
				if (((previousValue != value) 
							|| (this._Teachers.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Teachers.Entity = null;
						previousValue.T_Cards.Remove(this);
					}
					this._Teachers.Entity = value;
					if ((value != null))
					{
						value.T_Cards.Add(this);
						this._Id_Teacher = value.Id;
					}
					else
					{
						this._Id_Teacher = default(int);
					}
					this.SendPropertyChanged("Teachers");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Teachers")]
	public partial class Teachers : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private int _Id_Dep;
		
		private EntitySet<T_Cards> _T_Cards;
		
		private EntityRef<Departments> _Departments;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnId_DepChanging(int value);
    partial void OnId_DepChanged();
    #endregion
		
		public Teachers()
		{
			this._T_Cards = new EntitySet<T_Cards>(new Action<T_Cards>(this.attach_T_Cards), new Action<T_Cards>(this.detach_T_Cards));
			this._Departments = default(EntityRef<Departments>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id_Dep", DbType="Int NOT NULL")]
		public int Id_Dep
		{
			get
			{
				return this._Id_Dep;
			}
			set
			{
				if ((this._Id_Dep != value))
				{
					if (this._Departments.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnId_DepChanging(value);
					this.SendPropertyChanging();
					this._Id_Dep = value;
					this.SendPropertyChanged("Id_Dep");
					this.OnId_DepChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Teachers_T_Cards", Storage="_T_Cards", ThisKey="Id", OtherKey="Id_Teacher")]
		public EntitySet<T_Cards> T_Cards
		{
			get
			{
				return this._T_Cards;
			}
			set
			{
				this._T_Cards.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Departments_Teachers", Storage="_Departments", ThisKey="Id_Dep", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true, DeleteRule="CASCADE")]
		public Departments Departments
		{
			get
			{
				return this._Departments.Entity;
			}
			set
			{
				Departments previousValue = this._Departments.Entity;
				if (((previousValue != value) 
							|| (this._Departments.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Departments.Entity = null;
						previousValue.Teachers.Remove(this);
					}
					this._Departments.Entity = value;
					if ((value != null))
					{
						value.Teachers.Add(this);
						this._Id_Dep = value.Id;
					}
					else
					{
						this._Id_Dep = default(int);
					}
					this.SendPropertyChanged("Departments");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_T_Cards(T_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = this;
		}
		
		private void detach_T_Cards(T_Cards entity)
		{
			this.SendPropertyChanging();
			entity.Teachers = null;
		}
	}
}
#pragma warning restore 1591
